<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TODO: Come Up With Clever Title]]></title>
  <link href="http://charlesjohnson.github.com/atom.xml" rel="self"/>
  <link href="http://charlesjohnson.github.com/"/>
  <updated>2013-06-10T18:11:49-07:00</updated>
  <id>http://charlesjohnson.github.com/</id>
  <author>
    <name><![CDATA[Charles Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Chef Testing Part 1]]></title>
    <link href="http://charlesjohnson.github.com/blog/2013/06/10/understanding-chef-testing-part-1/"/>
    <updated>2013-06-10T18:10:00-07:00</updated>
    <id>http://charlesjohnson.github.com/blog/2013/06/10/understanding-chef-testing-part-1</id>
    <content type="html"><![CDATA[<p>This post is intended to be the first of a multi-part series on testing Chef code. This opening article will be 100% theory, talking about the whys and wherefores of testing when devising Chef-based automation. Subsequent posts will explore some of the different testing frameworks and tools available, along with practical examples of use.</p>

<p>Let&#8217;s dive in!</p>

<h1>Definition of Terms</h1>

<p>Before we begin, it may be useful to review some Chef terminology.</p>

<ul>
<li><strong>Resource</strong>: Any statement made in the Chef DSL is called a Resource. Resources are declarative. A full list of the Resources available in Chef is available on the Opscode <a href="http://docs.opscode.com/chef/resources.html">documentation site</a>. Here&#8217;s an example resource:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;apache2&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>Provider</strong>: A Provider is the code that Chef runs under the hood to turn a Resource into reality. In the example resource above, we never specified to Chef that it should &#8220;Fetch a tarball,&#8221; &#8220;Install an RPM,&#8221; or &#8220;Run apt-get.&#8221; Instead, the Chef interpreter inspects the system and determines which Provider will be most appropriate to satisfy the resource. The Opscode documentation site provides a <a href="http://docs.opscode.com/chef/resources.html#id155">list of all the providers available to the each resource</a>.</p></li>
<li><p><strong>Recipe</strong>: A recipe is a collection of Chef Resources and Ruby code, evaluated in order, from top-to-bottom. Example recipe (<a href="http://community.opscode.com/cookbooks/zsh/source">Taken from the zsh cookbook</a>):</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;zsh&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;platform_family&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;debian&quot;</span>
</span><span class='line'>  <span class="n">package</span> <span class="s2">&quot;zsh-doc&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;rhel&quot;</span><span class="p">,</span> <span class="s2">&quot;fedora&quot;</span>
</span><span class='line'>  <span class="n">package</span> <span class="s2">&quot;zsh-html&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>Cookbook</strong>: A cookbook is a package of Chef code. Cookbooks include recipes, templates, libraries, attributes, and all the other data and logic necessary to interact with some piece of functionality on a server. Typical cookbooks include <a href="http://community.opscode.com/cookbooks/java">Java</a>, <a href="http://community.opscode.com/cookbooks/nginx">Nginx</a>, <a href="http://community.opscode.com/cookbooks/zsh/source">ZSH</a> or <a href="http://community.opscode.com/cookbooks/tomcat">Tomcat</a>.</p></li>
<li><p><strong>Unit Test</strong>: Dictionary definitions are lazy, but here&#8217;s one anyway. From <a href="https://en.wikipedia.org/wiki/Unit_testing">Wikipedia</a>:</p>

<blockquote><p>unit testing is a method by which <strong>individual units of source code</strong>, sets of one or more computer program modules together with <strong>associated control data, usage procedures, and operating procedures</strong>, are tested to determine if they are <strong>fit for use</strong>. Intuitively, one can view a unit as the <strong>smallest testable part of an application</strong>. (<em>emphasis added</em>)</p></blockquote></li>
</ul>


<p>With all these terms in mind, let&#8217;s look at the logic behind Chef testing.</p>

<h1>Chef Testing Strategy</h1>

<p>When devising a testing strategy for Chef code, there are two important questions to answer:</p>

<ol>
<li><strong>When to test</strong>: At which point in the <strong>process</strong> of code execution will testing yield the most <strong>informative &amp; actionable</strong> results about the <strong>fitness</strong> of <em>“associated control data, usage procedures, and operating procedures?”</em></li>
<li><strong>What to test</strong>: What to test: What is the <strong>smallest</strong> <em>individual unit of source code</em> that will yield <strong>informative &amp; actionable</strong> results data about <strong>fitness for use?</strong></li>
</ol>


<p>Because Chef is a declarative language, the answers to these questions become inextricable.</p>

<h2>When To Test?</h2>

<p>There are three points at which one can test Chef code:</p>

<ul>
<li>Signal Input

<ul>
<li>Did I <strong>send</strong> Chef the correct <strong>command</strong>?</li>
</ul>
</li>
<li>Signal Processing

<ul>
<li>Did Chef <strong>interpret</strong> and <strong>execute</strong> my <strong>command</strong> correctly?</li>
</ul>
</li>
<li>Signal Output

<ul>
<li>Did my <strong>command</strong>, <strong>executed</strong> by Chef, <strong>achieve</strong> my desired <strong>result</strong>?</li>
</ul>
</li>
</ul>


<p>But at which of these points will we get the most interesting data? The answer to this question lies in&#8230;</p>

<h2>What To Test?</h2>

<p>We know that our unit tests exist to &#8220;verify the fitness of individual units of source code.&#8221;&#8221; But in the context of Chef, what <em>is</em> the individual unit of source code? This is where it gets tricky:</p>

<p>Because of Chef’s Resource &amp; Provider model, Chef itself is a testing engine. Either the intent expressed in any given resource is executed, or the Chef run fails!</p>

<p>For example (assuming a clean test environment):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;apache2&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because <strong>Opscode tests Chef</strong>, we know that this resource will work. Either this code will install the apache2 package, or Chef will throw a stack trace. We don&#8217;t have to test every resource declaration in our recipes over again!</p>

<p>This reveals two best practices when testing Chef code:</p>

<ol>
<li><p>The unit of test is the intent of the recipe. Instead of testing each individual resource in a recipe, <strong>test only those resources that best reflect the intent of the recipe</strong>.</p></li>
<li><p>Because we know that Chef resources will correctly interpret intent, there is no need to test the signal processing phase. Instead of worrying about whether Chef resources will correctly interpret intent, ensure that <strong>the intent is correctly expressed</strong>, and that <strong>the expressed intent achieves the desired goal when processed by Chef</strong>.</p></li>
</ol>


<h2>Next time</h2>

<p>We&#8217;ll discuss the planet Magrathea, and how a proper understanding of unit testing with declarative languages could have helped the Magratheans save a lot of time and effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copying Files as Part of a Chef Recipe]]></title>
    <link href="http://charlesjohnson.github.com/blog/2013/03/12/copying-files-as-part-of-a-chef-recipe/"/>
    <updated>2013-03-12T16:54:00-07:00</updated>
    <id>http://charlesjohnson.github.com/blog/2013/03/12/copying-files-as-part-of-a-chef-recipe</id>
    <content type="html"><![CDATA[<p>It&#8217;s a little puzzling to me that while Chef has the <a href="http://docs.opscode.com/chef/resources.html#remote_file">remote_file</a> resource for downloading files from remote hosts, it doesn&#8217;t have a similar mechanism in the <a href="http://docs.opscode.com/chef/resources.html#remote_file">file</a> resource to copy files as part of a recipe. While there&#8217;s usually a workaround and unnecessary file copies should be discourage in a deploy or configuration pattern, sometimes outside actors beyond our control may place an essential file at an inconvenient and non-configurable location on the filesystem.</p>

<p>One good example of this occurs when a <a href="http://www.vagrantup.com">Vagrant</a> guest with the <a href="http://docs-v1.vagrantup.com/v1/docs/provisioners/chef_server.html">Chef-Server</a> provisioner has the <a href="http://community.opscode.com/cookbooks/chef-cent">chef-client</a> cookbook in the <a href="http://docs.opscode.com/essentials_node_object_run_lists.html">run_list</a>. When Vagrant invokes the Chef-Server provisioner, it writes out a <code>client.rb</code> file to the guest filesystem at <code>/tmp/vagrant-chef-1/client.rb</code>, along with a few others. The provisioner then runs chef-client in the guest VM with the <code>-c /tmp/vagrant-chef-1/client.rb</code> command-line flag, redirecting chef-client to the config file at this location.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/tmp/vagrant-chef-1
</span><span class='line'>|-- client.rb
</span><span class='line'>|-- dna.json
</span><span class='line'><span class="sb">`</span>-- validation.pem
</span></code></pre></td></tr></table></div></figure>


<p>By contrast, when chef-client is started as a daemon by the <code>chef-client::service</code> recipe, chef-client looks for configuration at the location <code>#{node['chef-client']['conf_dir']}/client.rb</code>, which defaults to <code>/etc/chef/client.rb.</code> So what happens if the recipe being tested with Vagrant adds <code>recipe[chef-client::service]</code> to the node&#8217;s run_list?<!--more--></p>

<p><a href="http://i.imgur.com/wMT8GvR"><img class="center" src="http://i.imgur.com/wMT8GvR.png" width="576" height="539" title="Chef provisioner flowchart" alt="A flowchart diagram of Vagrant running chef-client with the chef-server provisioner"></a></p>

<p>The Vagrant provisioner will generate a client.rb file at <code>/tmp/vagrant-chef-1/client.rb</code>, and then start an instance of chef-client using this configuration file. When the provisioning instance of chef-client converges the <code>chef-client::service</code> recipe, it will try to start a second, daemonized copy of chef-client via an init script. This second instance of chef-client will look for configuration at the location <code>#{node['chef-client']['conf_dir']}/client.rb</code>, which defaults to <code>/etc/chef/client.rb</code>. But because there is no config file at this location, the service will not start, the provisioning chef-client run will exit with an error, and the vagrant provision will fail.</p>

<p>It&#8217;s tricky to use Vagrant to test code that starts chef-client as a service during the provisioner. To fix this issue, we have to either tell the daemonized instance of chef-client to look for the configuration file in another location, or we have to copy the configuration file to the location that the daemon is expecting. It turns out that redirecting the daemon by changing the attribute isn&#8217;t the best choice: Unlike Vagrant&#8217;s <a href="http://docs-v1.vagrantup.com/v1/docs/provisioners/chef_solo.html">Chef-Solo</a> provisioner, it&#8217;s not possible to inject node attributes directly into the Chef-Server provisioner&#8217;s run via the Vagrantfile. In addition, because Vagrant writes out the <code>client.rb</code> file to <code>/tmp/vagrant-chef-1/client.rb</code>, setting the attribute to this location would set an uncomfortable (and unwise) precedent. So instead, the best solution is to wait until Vagrant writes out the configuration file at <code>/tmp/vagrant-chef-1/client.rb</code>, and then copy it to <code>/etc/chef/client.rb</code> before attempting to converge the <code>chef-clientent::service</code> recipe.</p>

<p>This code should should take care of this use case. It assumes that the attribute <code>node['chef-client']['conf_dir']</code> has been set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="s2">&quot;/tmp/vagrant-chef-1/client.rb&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ruby_block</span> <span class="s2">&quot;Copy Chef config file if running in a Vagrant guest&quot;</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">block</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">::</span><span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span> <span class="s2">&quot;/tmp/vagrant-chef-1/client.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;chef-client&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/client.rb&quot;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;chef-client&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/client.rb&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">FileUtils</span><span class="o">.</span><span class="n">compare_file</span><span class="p">(</span><span class="s2">&quot;/tmp/vagrant-chef-1/client.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;chef-client&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/client.rb&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does: First check to see if the source file exists. If it does, check to see if the target file exists. If both files exist, then compare them to see if they are identical. If the files are not identical, or if the target file does not exist, then copy the source file to the target file location, overwriting the target file if present. In all other cases, do nothing.</p>

<p>Drop this in a recipe that&#8217;s included before the <code>chef-client::service</code> recipe as part of the run_list in the Vagrantfile, and the Vagrant provision run will now complete. <strong>Be careful, there are security implications in this example!</strong> The code itself is fine, but because <code>/tmp</code> is typically world-writeable, we can&#8217;t rely on Vagrant being the only outside actor to leave a client.rb at this location. Proceed with caution. This is a good example of why copying files as part of a recipe is usually discouraged.</p>

<p>One note: While I haven&#8217;t done any direct testing, it looks like Ruby&#8217;s <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html#method-c-compare_file_">FileUtils.compare_file()</a> method works by streaming both files and comparing them, so it should work with binaries. However, I could imagine this being very memory-hungry if attempted with large files. Or maybe not? I&#8217;m a lousy Rubyist.</p>
]]></content>
  </entry>
  
</feed>
